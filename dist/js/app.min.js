app.config.extend({enableSecurity:!1,securityWatchConsole:!1,securityCheckConsoleInterval:5e3,apiUrl:"https://jsonplaceholder.typicode.com",debug:!0,lang:"en",rootPath:"src/app",bootstrapModal:!0,mainController:"Home",transitions:!0,routing:app.router.create().path("/",{controller:"Home"}).path("/about",{controller:"About"}).path("/posts",{controller:"Posts"}).path("/post/:postId",{name:"Post",controller:"Post"}).path("/post/edit/:postId",{controller:"EditPost",routingParams:{edit:!0}}).path("/post/comments/:postId",{controller:"Comments"}).other({controller:"NotFound"})}),app.abstract.register("CommentsList",{createCommentsList:function(a){var b=this;app.service.Comments.getComments(a).then(function(a){app.service.CommentsList.render(b.selector.commentsList(),{comments:a})}).catch(function(a){})}}),app.abstract.register("Modal",{bindCancel:function(){var a=this;a.selector.close().click(function(b){b.preventDefault(),a.hide()})},realizeOk:function(a){a.preventDefault(),this.hide(),this.approveCallback&&this.approveCallback()},bindOk:function(a){this.selector.ok().click(this.realizeOk.bind(this))}}),app.component.register("CommentsList",{inherits:[app.abstract.CommentsList],init:function(a){app.component.CommentsList.createCommentsList(a.pathParams.postId),app.log("component rootSelector"),console.log(app.component.CommentsList.rootSelector())}}),app.component.register("Footer",{global:!0,init:function(a){}}),app.component.register("PostsList",{init:function(a){a.recentPosts?app.component.PostsList.createRecentPostsList():app.component.PostsList.createAllPostsList()},createRecentPostsList:function(){app.service.Post.getRecentPosts().then(function(a){app.component.PostsList.createPostsList(a,5)}).catch(function(a){})},createAllPostsList:function(){app.service.Post.getPosts().then(function(a){app.component.PostsList.createPostsList(a,20)}).catch(function(a){})},createPostsList:function(a,b){app.partial.PostsList.render(app.component.PostsList.selector.postsList(),{limit:b,posts:a})}}),app.component.register("Spinner",{global:!0,init:function(){},show:function(){app.component.Spinner.selector.spinner().show()},hide:function(){app.component.Spinner.selector.spinner().hide()}}),app.component.register("TopMenu",{global:!0,init:function(){app.component.TopMenu.selector.toggleDropdown().click(function(){app.component.TopMenu.selector.dropdown().slideToggle(200)}),app.component.TopMenu.selector.changeLangToEn().click(function(){app.component.TopMenu.changeLanguage("en")}),app.component.TopMenu.selector.changeLangToPl().click(function(){app.component.TopMenu.changeLanguage("pl")}),app.component.TopMenu.selectCurrent(app.router.getCurrentRoute()),app.router.onRouteChange("topMenu",function(a,b,c){app.component.TopMenu.selectCurrent(b)})},changeLanguage:function(a){app.system.changeLanguage(a),app.component.TopMenu.setLanguageText(),app.component.TopMenu.selector.dropdown().slideUp(200)},selectCurrent:function(a){""==a&&(a="home"),app.component.TopMenu.selector.home().removeClass("active"),app.component.TopMenu.selector.posts().removeClass("active"),app.component.TopMenu.selector.about().removeClass("active"),app.component.TopMenu.selector[a]&&app.component.TopMenu.selector[a]().addClass("active"),app.component.TopMenu.selector.dropdown().slideUp(200)},setLanguageText:function(){app.component.TopMenu.selector.currentLang().attr("spike-translation","language_"+app.config.lang)}}),app.controller.register("About",{init:function(){}}),app.controller.register("Comments",{components:["CommentsList"],init:function(){}}),app.controller.register("EditPost",{post:null,init:function(a){app.log("controller rootSelector"),console.log(app.controller.EditPost.rootSelector()),app.controller.EditPost.selector.backToPost().click(app.router.back),app.service.Post.getPost(a.pathParams.postId).then(function(a){app.controller.EditPost.post=a,app.controller.EditPost.setPost()}).catch(function(a){})},setPost:function(){app.controller.EditPost.selector.names.title().set(app.controller.EditPost.post.title),app.controller.EditPost.selector.names.body().set(app.controller.EditPost.post.body),app.controller.EditPost.selector.save().click(function(a){a.preventDefault();var b=$.extend(!0,app.controller.EditPost.post,app.controller.EditPost.selector.postForm().serializeObject());app.service.Post.savePost(b),app.router.back()}),app.controller.EditPost.selector.delete().click(function(a){a.preventDefault(),app.system.render(app.modal.ConfirmDelete,{approveCallback:function(){app.service.Post.deletePost(app.controller.EditPost.post),app.router.redirect("/posts")}})})}}),app.controller.register("Home",{components:{PostsList:{recentPosts:!0}},init:function(a){app.debug("params",a),app.events.listen("EnterToPostEvent",function(a){app.log("User enters to Post controller with data")})}}),app.controller.register("NotFound",{init:function(){}}),app.controller.register("Post",{post:null,init:function(a){app.controller.Post.selector.backToList().click(app.router.back),app.service.Post.getPost(a.pathParams.postId).then(function(a){app.controller.Post.post=a,app.controller.Post.setPost(),app.events.broadcast("EnterToPostEvent",{post:a})}).catch(function(a){})},setPost:function(){app.controller.Post.post.post={title:app.controller.Post.post.title,author:app.controller.Post.post.author,body:app.controller.Post.post.body},app.controller.Post.selector.postContent().set(app.controller.Post.post),app.controller.Post.selector.comments().set(app.router.createLink("post/comments/"+app.controller.Post.post.id)),app.controller.Post.selector.edit().set(app.router.createLink("post/edit/"+app.controller.Post.post.id))}}),app.controller.register("Posts",{components:["PostsList"],init:function(){}}),app.modal.register("ConfirmDelete",{inherits:[app.abstract.Modal],init:function(a){app.log("modal rootSelector"),console.log(app.modal.ConfirmDelete.rootSelector()),app.modal.ConfirmDelete.approveCallback=a.approveCallback,app.modal.ConfirmDelete.bindCancel(),app.modal.ConfirmDelete.bindOk()}}),app.service.register("Comments",{cachedComments:null,getComments:function(a){return app.rest.get(this.cachedComments||app.config.apiUrl+"/comments",{urlParams:{postId:a}})}}),app.service.register("Post",{cachedPosts:null,getPosts:function(){return app.rest.get(app.service.Post.cachedPosts||app.config.apiUrl+"/posts").then(function(a){return app.service.Post.cachedPosts=a,a})},getRecentPosts:function(){return app.rest.get(app.service.Post.cachedPosts||app.config.apiUrl+"/posts",{interceptors:["Request"]}).then(function(a){return app.service.Post.cachedPosts=a,a})},getPost:function(a){var b=app.util.List.findByProperty(app.service.Post.cachedPosts,"id",a);return app.rest.get(b||app.config.apiUrl+"/posts/:postId",{pathParams:{postId:a}})},savePost:function(a){var b=app.util.List.findIndexByProperty(app.service.Post.cachedPosts,"id",a.id);b&&app.service.Post.cachedPosts[b]&&(app.service.Post.cachedPosts[b]=a)},deletePost:function(a){var b=app.util.List.findIndexByProperty(app.service.Post.cachedPosts,"id",a.id);b&&app.service.Post.cachedPosts[b]&&(app.service.Post.cachedPosts=app.util.List.removeFromList(app.service.Post.cachedPosts,b))}}),app.partial.register("CommentsList",{replace:!0}),app.partial.register("PostsList",{replace:!0,before:function(a){a.limit=10},selectPost:function(a){app.router.redirectByName("Post",{postId:a})}}),app.util.register("List",{findByProperty:function(a,b,c){if(!a||!b)return null;for(var d=0;d<a.length;d++)if(a[d][b]===c)return a[d];return null},findIndexByProperty:function(a,b,c){if(!a||!b)return null;for(var d=0;d<a.length;d++)if(a[d][b]===c)return d;return-1},removeFromList:function(a,b){for(var c=[],d=0;d<a.length;d++)d!==b&&c.push(a[d]);return c}}),app.message.add("en","i18/en.json").then(function(){app.log("Language EN loaded")}),app.message.add("pl","i18/pl.json").then(function(){app.log("Language PL loaded")}),app.system.disableCache(),app.rest.interceptor("Request",function(a,b){app.log("invoke Request interceptor")}),app.rest.spinnerHide=function(a){app.component.Spinner.hide()},app.rest.spinnerShow=function(a){app.component.Spinner.show()},app.events.extend({render:function(){app.system.getView().css("min-height",$(window).height()+"px"),app.service.Post.getPosts()}}),app.events.register("EnterToPostEvent"),app.system.init();